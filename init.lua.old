
sp = require("hs._asm.undocumented.spaces")

local hidden_space = sp.createSpace()
hs.hotkey.bind({"cmd", "alt", "ctrl", "shift"}, "R", function()
  sp.removeSpace(hidden_space) -- clean after us
  hs.reload()
end)
hs.alert.show("Config loaded")

local tags_window_mapping = {}
add_tag_to_window = function(win, tag) 
    if tags_window_mapping[tag] == nil then
        tags_window_mapping[tag] = {}
    end
    tags_w
    table.insert(tags_window_mapping[tag], win)
end

clear_tags_from_window = function(win)

end

local show_window = function(win)
    current_space = sp.activeSpace()
    wspaces = win:spaces()
    if #wspaces == 1 and wspaces[1] ~= current_space then
        sp.moveWindowToSpace(win:id(), current_space)
    end
end

local hide_window = function(win)
    current_space = sp.activeSpace()
    wspaces = win:spaces()
    if #wspaces == 1 and wspaces[1] ~= hidden_space then
        sp.moveWindowToSpace(win:id(), hidden_space)
    end
end

local toggle_window = function(win)
    current_space = sp.activeSpace()
    wspaces = win:spaces()
    if #wspaces == 1 and wspaces[1] == current_space then
        sp.moveWindowToSpace(win:id(), hidden_space)
    elseif #wspaces == 1 then
        sp.moveWindowToSpace(win:id(), current_space)
        win:focus()
    end
end

local toggle_tag_state = function(tag) 
    local wins = tags_window_mapping[tag]
    if wins == nil then 
        hs.alert.show("no associated windows")
    else
        for i,win in ipairs(wins) do
            if win ~= nil then toggle_window(win) end
        end
    end
end

local tagFocusedWindow = function()
    local win = hs.window.focusedWindow()
    local cmd = "~/Applications/CocoaDialog.app/Contents/MacOS/CocoaDialog"
    local args = {"standard-inputbox", "--text", "tag_name", "--informative-text", "rename space to:", "--title", '""'}
    local task = hs.task.new(cmd, function(exitCode, stdOut, stdErr)
        local tag = string.sub(stdOut, 3,-2)
        hs.alert.show(tag)
        add_tag_to_window(win, tag)
    end, args)
    task:start()
end

hs.hotkey.bind({"cmd","alt","ctrl","shift"},"1", function() add_tag_to_window(hs.window.focusedWindow(), "g1") end)
hs.hotkey.bind({"cmd","alt","ctrl","shift"},"2", function() add_tag_to_window(hs.window.focusedWindow(), "g2") end)
hs.hotkey.bind({"cmd","alt","ctrl","shift"},"3", function() add_tag_to_window(hs.window.focusedWindow(), "g3") end)
hs.hotkey.bind({"cmd","alt","ctrl","shift"},"4", function() add_tag_to_window(hs.window.focusedWindow(), "g4") end)
hs.hotkey.bind({"cmd","alt","ctrl","shift"},"5", function() add_tag_to_window(hs.window.focusedWindow(), "g5") end)
hs.hotkey.bind({"cmd","alt","ctrl","shift"},"6", function() add_tag_to_window(hs.window.focusedWindow(), "g6") end)
hs.hotkey.bind({"cmd","alt","ctrl","shift"},"7", function() add_tag_to_window(hs.window.focusedWindow(), "g7") end)

hs.hotkey.bind({"cmd","alt"},"1", function() toggle_tag_state("g1") end)
hs.hotkey.bind({"cmd","alt"},"2", function() toggle_tag_state("g2") end)
hs.hotkey.bind({"cmd","alt"},"3", function() toggle_tag_state("g3") end)
hs.hotkey.bind({"cmd","alt"},"4", function() toggle_tag_state("g4") end)
hs.hotkey.bind({"cmd","alt"},"5", function() toggle_tag_state("g5") end)
hs.hotkey.bind({"cmd","alt"},"6", function() toggle_tag_state("g6") end)
hs.hotkey.bind({"cmd","alt"},"7", function() toggle_tag_state("g7") end)

hs.hotkey.bind({"cmd","alt","ctrl"}, "f", function()
    tagFocusedWindow()
end)

hs.hotkey.bind({"cmd","alt"}, "s", function() toggle_tag_state("key_s") end)


--=================== MOVE / RESIZE / FOCUS ===========================
-- cmd+alt      + arrows  -- resize
-- cmd+alt      + /       -- maximize/center
-- cmd+alt      + g       -- grid resize
-- ^+alt        + arrows  -- move
-- ^+cmd+alt    + arrows  -- focus, sort-of

-- Toggle a window between its normal size, and being maximized
local frameCache = {}
function toggle_window_maximized()
    local win = hs.window.focusedWindow()
    if frameCache[win:id()] ~= nil then
        win:setFrame(frameCache[win:id()], 0)
        frameCache[win:id()] = nil
    else
        frameCache[win:id()] = win:frame()
        win:maximize(0)
    end
end

RESIZE={"cmd","alt"}
MOVEW={"ctrl","alt"}
FOCUSW={"ctrl","alt","cmd"}

hs.grid.GRIDWIDTH = 4
hs.grid.GRIDHEIGHT = 4
hs.grid.MARGINX = 0
hs.grid.MARGINY = 0

hs.hotkey.bind(RESIZE, "g", hs.grid.show)

hs.hotkey.bind(MOVEW, "left", function()
    local win = hs.window.focusedWindow()
    local f = win:frame()
    local screen = win:screen()
    local max = screen:frame()
    jump = max.w / 4
    f.x = f.x - jump
    win:setFrame(f, 0)
end)
hs.hotkey.bind(MOVEW, "right", function()
    local win = hs.window.focusedWindow()
    local f = win:frame()
    local screen = win:screen()
    local max = screen:frame()
    jump = max.w / 4
    f.x = f.x + jump
    win:setFrame(f, 0)
end)
hs.hotkey.bind(MOVEW, "up", function()
    local win = hs.window.focusedWindow()
    local f = win:frame()
    local screen = win:screen()
    local max = screen:frame()
    jump = max.h / 4
    f.y = f.y - jump
    win:setFrame(f, 0)
end)
hs.hotkey.bind(MOVEW, "down", function()
    local win = hs.window.focusedWindow()
    local f = win:frame()
    local screen = win:screen()
    local max = screen:frame()
    jump = max.h / 4
    f.y = f.y + jump
    win:setFrame(f, 0)
end)

hs.hotkey.bind(RESIZE, "/", toggle_window_maximized)

hs.hotkey.bind(RESIZE, "c", function() 
    local win = hs.window.focusedWindow()
    local f = win:frame()
    local screen = win:screen()
    local max = screen:frame()
    dy = max.h / 4
    dx = max.w / 4
    f.x = max.x + dx
    f.w = max.w - dx - dx
    f.y = max.y + dy
    f.h = max.h - dy - dy
    win:setFrame(f, 0)
end)

hs.hotkey.bind(RESIZE, "right", function()
    local win = hs.window.focusedWindow()
    local f = win:frame()
    local screen = win:screen()
    local max = screen:frame()
    local EPS = 5

    local jump = max.w / 4

    if (f.x + f.w >= max.w - EPS) -- at edge, shrink
    then
        f.x = f.x + jump
        f.w = f.w - jump
    else -- not at edge, grow
        f.w = f.w + jump
    end
    if f.x + f.w > max.w then f.w = max.w - f.x end
    win:setFrame(f, 0)
	hs.grid.snap(win)
end)

hs.hotkey.bind(RESIZE, "left", function()
    local win = hs.window.focusedWindow()
    local f = win:frame()
    local screen = win:screen()
    local max = screen:frame()
    local EPS = 5

    local jump = max.w / 4

    if (f.x <= EPS) -- at edge, shrink
    then
        f.w = f.w - jump
    else -- not at edge, grow
        f.x = f.x - jump
        f.w = f.w + jump
    end
    if f.x < 0 then f.x = 0 end
    win:setFrame(f, 0)
	hs.grid.snap(win)
end)

hs.hotkey.bind(RESIZE, "up", function()
    local win = hs.window.focusedWindow()
    local f = win:frame()
    local screen = win:screen()
    local max = screen:frame()
    local EPS = 5

    local jump = max.h / 4

    if (f.y < max.y + EPS) -- at edge, shrink
    then
        f.h = f.h - jump
    else -- not at edge, grow
        f.y = f.y - jump
        f.h = f.h + jump
    end
    if f.y < 0 then f.y = 0 end
    win:setFrame(f, 0)
	hs.grid.snap(win)
end)

hs.hotkey.bind(RESIZE, "down", function()
    local win = hs.window.focusedWindow()
    local f = win:frame()
    local screen = win:screen()
    local max = screen:frame()
    local EPS = 5

    local jump = (max.h - max.y) / 4

    if (f.y + f.h > max.y + max.h - EPS) -- at edge, shrink
    then
        f.y = f.y + jump
        f.h = f.h - jump
    else -- not at edge, grow
        f.h = f.h + jump
    end
    if f.y + f.h > max.h then f.h = max.y + max.h - f.y end
    win:setFrame(f, 0)
	hs.grid.snap(win)
end)

hs.hotkey.bind(FOCUSW, "left", function()
	local win = hs.window.focusedWindow()
    win:focusWindowWest(nil,true,false)	
end)
hs.hotkey.bind(FOCUSW, "right", function()
	local win = hs.window.focusedWindow()
	win:focusWindowEast(nil,true,false)	
end)
hs.hotkey.bind(FOCUSW, "up", function()
	local win = hs.window.focusedWindow()
	win:focusWindowNorth(nil,true,false)	
end)
hs.hotkey.bind(FOCUSW, "down", function()
	local win = hs.window.focusedWindow()
	win:focusWindowSouth(nil,true,false)	
end)

--======================================================

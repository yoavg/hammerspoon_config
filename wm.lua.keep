--========================================= THE WM ===================
local c = require "circular"
local menu = require "menu"

ttn = c.TTN:new()

local next_tag = function()
    local t = ttn:next_tag()
    hs.alert.show(t)
    ttn:show_tag(t)
end
local prev_tag = function()
    local t = ttn:prev_tag()
    hs.alert.show(t)
    ttn:show_tag(t)
end
local select_tag = function()
    menu(ttn:tags(), function(tag)
        hs.alert.show(tag)
        ttn:set_current_tag(tag); ttn:show_tag(tag) end)
end
local next_window = function()
    local t = ttn:current_tag()
    if t == nil then return t end
    local wins = ttn.tag_to_windows[t]
    if wins == nil then return wins end
    if wins:cur():id() ~= hs.window.focusedWindow():id() then
        ttn:focus(wins:cur())
    else
        ttn:focus(wins:fwd())
    end
end
local prev_window = function()
    local t = ttn:current_tag()
    if t == nil then return t end
    local wins = ttn.tag_to_windows[t]
    if wins == nil then return wins end
    ttn:focus(wins:back())
end
local select_window = function()
    local t = ttn:current_tag()
    if t == nil then return t end
    local wins = ttn.tag_to_windows[t]
    wins:menu_select(wins.app_title, function(win)
        wins:set(win)
        ttn:focus(win)
    end)
end

local switch_to_tag = function(tag)
        ttn:set_current_tag(tag); ttn:show_tag(tag) end

local tag_focused_window = function()
    menu(ttn:tags(), function(tag)
        hs.alert.show(tag)
        ttn:add_tag_to_window(hs.window.focusedWindow(), tag)
        local key = tag:gmatch(".*~(.).*")()
        if key ~= nil then 
            hs.alert.show("bound " .. key)
            hs.hotkey.bind({"alt","ctrl"}, key, function() ttn:set_current_tag(tag); ttn:show_tag(tag) end)
            hs.hotkey.bind({"alt"}, key,        function() ttn:show_tag(tag) end)
        end
    end)
end

local remove_selected_tag_from_focused_window = function()
    local win = hs.window.focusedWindow()
    menu(ttn:get_tags_of_window(win), function(tag)
        ttn:remove_tag_from_window(win, tag) end)
end

local select_global_window = function() 
    --local windows = hs.window.allWindows()
    local windows = hs.window.filter.new():getWindows()
    local titles = hs.fnutils.imap(windows,function(w) 
        return table.concat({w:application():title(), " : ", w:title()}) end)
    menu(titles, function(ttl) 
        local idx = hs.fnutils.indexOf(titles, ttl)
        local sel = windows[idx] -- hs.fnutils.ifilter(windows,function(w) return w:title() == ttl end)
        if (sel ~= nil) then sel:focus() end
    end)
end

return { next_tag = next_tag,
         prev_tag = prev_tag,
         select_tag = select_tag,
         next_window = next_window,
         prev_window = prev_window,
         select_window = select_window,
         select_global_window = select_global_window,
         tag_focused_window = tag_focused_window,
         remove_selected_tag_from_focused_window = remove_selected_tag_from_focused_window,
         windows_for_current_tag = function() return ttn:windows_for_tag(ttn:current_tag()) end,
         untagged_windows = function() return ttn:get_untagged_windows() end,
     }
    
